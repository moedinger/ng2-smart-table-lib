{"version":3,"file":"input-filter.component.js","sourceRoot":"","sources":["../../../../../src/ng2-smart-table/components/filter/filter-types/input-filter.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAiB,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAE/E,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,wCAAwC,CAAC;AAChD,OAAO,gCAAgC,CAAC;AACxC,OAAO,wBAAwB,CAAC;AAEhC,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAajD,IAAa,oBAAoB;IAAS,wCAAa;IAKrD;QAAA,YACE,iBAAO,SACR;QALS,kBAAY,GAAG,IAAI,YAAY,EAAO,CAAC;QACjD,kBAAY,GAAG,IAAI,WAAW,EAAE,CAAC;;IAIjC,CAAC;IAED,uCAAQ,GAAR;QAAA,iBAOC;QANC,IAAI,CAAC,YAAY,CAAC,YAAY;aAC3B,IAAI,CAAC,CAAC,CAAC;aACP,oBAAoB,EAAE;aACtB,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;aACxB,SAAS,CAAC,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC,CAAC;QAClD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;IACH,2BAAC;AAAD,CAAC,AArBD,CAA0C,aAAa,GAqBtD;AAnBW;IAAT,MAAM,EAAE;;0DAAwC;AAFtC,oBAAoB;IAXhC,SAAS,CAAC;QACT,QAAQ,EAAE,cAAc;QACxB,QAAQ,EAAE,uOAOT;KACF,CAAC;;GACW,oBAAoB,CAqBhC;SArBY,oBAAoB","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport { FormControl } from '@angular/forms';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/skip';\n\nimport { DefaultFilter } from './default-filter';\n\n@Component({\n  selector: 'input-filter',\n  template: `\n    <input [(ngModel)]=\"query\"\n           [ngClass]=\"inputClass\"\n           [formControl]=\"inputControl\"\n           class=\"form-control\"\n           type=\"text\"\n           placeholder=\"{{ column.title }}\" />\n  `,\n})\nexport class InputFilterComponent extends DefaultFilter implements OnInit {\n\n  @Output() sFormControl = new EventEmitter<any>();\n  inputControl = new FormControl();\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this.inputControl.valueChanges\n      .skip(1)\n      .distinctUntilChanged()\n      .debounceTime(this.delay)\n      .subscribe((value: string) => this.setFilter());\n    this.sFormControl.emit({ control: this });\n  }\n\n  resetFilter() {\n    this.inputControl.reset();\n  }\n}\n"]}